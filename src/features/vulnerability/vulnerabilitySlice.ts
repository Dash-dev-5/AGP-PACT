import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { VulnerabilityType } from './vulnerabilityType';
import { getRequest, parseError } from 'utils/verbes';
import { endpoints } from 'utils/endpoints';

interface InitialState {
  vulnerabilities: VulnerabilityType[];
}

const initialState: InitialState = {
  vulnerabilities: []
};

export const fetchVulnerability = createAsyncThunk<VulnerabilityType[]>('complainant/fetchComplainants', async (_, { rejectWithValue }) => {
  try {
    const response = await getRequest<VulnerabilityType[]>(endpoints.vulnerability.main);
    return response.data;
  } catch (error) {
    return rejectWithValue(parseError(error));
  }
});

const vulnerabilitySlice = createSlice({
  name: 'vulnerability',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchVulnerability.fulfilled, (state, action) => {
      state.vulnerabilities = action.payload;
    });
  }
});

export default vulnerabilitySlice.reducer;
